{"ast":null,"code":"var _jsxFileName = \"/Users/sameera/Documents/journalApp/app/src/NewEntry.js\";\nimport React from 'react';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport { withRouter } from 'react-router-dom';\n\nclass NewEntry extends React.Component {\n  constructor(props) {\n    super(props);\n    this.emptyEntry = {\n      id: '',\n      title: '',\n      content: '',\n      dateCreated: '',\n      dateModified: '',\n      category: {\n        name: ''\n      },\n      user: {\n        id: '',\n        firstName: '',\n        lastName: '',\n        email: ''\n      }\n    };\n    this.state = {\n      entry: this.emptyEntry\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    const {\n      entry\n    } = this.state;\n    entry.id = this.props.match.params.id;\n    this.setState({\n      entry\n    });\n    const response = await fetch('/api/user', {\n      credentials: 'include'\n    });\n    const body = await response.text();\n    console.log(\"user \", body);\n\n    if (body === '') {\n      this.setState({\n        isAuthenticated: false\n      });\n    } else {\n      this.setState({\n        isAuthenticated: true,\n        user: JSON.parse(body)\n      });\n    }\n\n    if (entry.id) {\n      const entryDetails = await fetch(`/api/entry/${entry.id}`);\n      const entryResponse = await entryDetails.text();\n      console.log(\"entry response \", entryResponse);\n\n      if (entryResponse !== '') {\n        this.setState({\n          entry: JSON.parse(entryResponse)\n        });\n      }\n    }\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const {\n      entry\n    } = this.state;\n    entry.user.firstName = this.state.user.given_name;\n    entry.user.lastName = this.state.user.family_name;\n    entry.user.email = this.state.user.email;\n\n    if (entry.id) {\n      await fetch('/api/entry/:id', {\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(entry)\n      });\n    } else {\n      await fetch('/api/entry/', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(entry)\n      });\n    }\n\n    this.props.history.push('/entries');\n    window.location.reload(false);\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    let entry = { ...this.state.entry\n    };\n    entry[name] = value;\n\n    if (name == 'category') {\n      entry[name] = {\n        name: value\n      };\n    }\n\n    this.setState({\n      entry\n    });\n  }\n\n  render() {\n    const {\n      entry\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }\n    }, \"Title\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      style: \"width: 20px;\",\n      name: \"title\",\n      id: \"title\",\n      value: entry.title || '',\n      onChange: this.handleChange,\n      autoComplete: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }\n    }, \"Category\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"category\",\n      id: \"category\",\n      value: entry.category.name || '',\n      onChange: this.handleChange,\n      autoComplete: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }\n    }, \"Entry\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"textarea\",\n      name: \"content\",\n      id: \"content\",\n      value: entry.content || '',\n      onChange: this.handleChange,\n      autoComplete: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    }, \"Save\"), ' ', /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    }, \"Cancel\"))));\n  }\n\n}\n\nexport default withRouter(NewEntry);","map":{"version":3,"sources":["/Users/sameera/Documents/journalApp/app/src/NewEntry.js"],"names":["React","Button","Container","Form","FormGroup","Input","Label","withRouter","NewEntry","Component","constructor","props","emptyEntry","id","title","content","dateCreated","dateModified","category","name","user","firstName","lastName","email","state","entry","handleChange","bind","handleSubmit","componentDidMount","match","params","setState","response","fetch","credentials","body","text","console","log","isAuthenticated","JSON","parse","entryDetails","entryResponse","event","preventDefault","given_name","family_name","method","headers","stringify","history","push","window","location","reload","target","value","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport { withRouter } from 'react-router-dom';\n\nclass NewEntry extends React.Component {\n\t\n\temptyEntry = {\n\t\t    id: '',\n\t\t    title: '',\n\t\t    content: '',\n\t\t    dateCreated: '',\n\t\t    dateModified: '', \n\t\t    category: {name: ''},\n\t\t    user: {id: '',\n\t\t\t\tfirstName: '',\n\t\t\t\tlastName: '',\n\t\t\t\temail: ''}\n\t};\n\t\n\tconstructor(props) {\n\t    super(props);\n\t    this.state = {\n\t    \tentry: this.emptyEntry,\n\t    };\n\t    this.handleChange = this.handleChange.bind(this);\n\t    this.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\t\n\tasync componentDidMount() {\n\t\tconst {entry} = this.state;\n\t\tentry.id = this.props.match.params.id;\n\t\tthis.setState({entry});\n\t    const response = await fetch('/api/user', {credentials: 'include'});\n\t    const body = await response.text();\n\t    console.log(\"user \", body);\n\t    if (body === '') {\n\t\t    this.setState(({isAuthenticated: false}))\n\t\t} else {\n\t\t    this.setState({isAuthenticated: true, user: JSON.parse(body)})\n\t\t}\n\t    \n\t    if(entry.id){\n\t    \tconst entryDetails = await fetch(`/api/entry/${entry.id}`);\n\t    \tconst entryResponse = await entryDetails.text();\n\t    \tconsole.log(\"entry response \", entryResponse);\n\t    \tif (entryResponse !== '') {\n\t    \t\tthis.setState({entry: JSON.parse(entryResponse)});\n\t\t\t} \n\t    }\n\t}\n\t\n\tasync handleSubmit(event) {\n\t    event.preventDefault();\n\t    const {entry} = this.state;\n\t    entry.user.firstName = this.state.user.given_name;\n\t    entry.user.lastName = this.state.user.family_name;\n\t    entry.user.email = this.state.user.email;\n\t    if(entry.id){\n\t\t    await fetch('/api/entry/:id', {\n\t\t      method: 'PUT',\n\t\t      headers: {\n\t\t        'Accept': 'application/json',\n\t\t        'Content-Type': 'application/json'\n\t\t      },\n\t\t      body: JSON.stringify(entry)\n\t\t    });\n\t    }\n\t    else{\n\t    \tawait fetch('/api/entry/', {   \t\n\t\t\t    method: 'POST',\n\t\t\t    headers: {\n\t\t\t      'Accept': 'application/json',\n\t\t\t      'Content-Type': 'application/json'\n\t\t\t    },\n\t\t\t    body: JSON.stringify(entry)\n\t\t\t });\n\t    \t\n\t    }\n\t    this.props.history.push('/entries');\n\t    window.location.reload(false);\n\t }\n\t\n\thandleChange(event) {\n\t\tconst target = event.target;\n\t    const value = target.value;\n\t    const name = target.name;\n\t    let entry = {...this.state.entry};\n\t    entry[name] = value;\n\t    if(name=='category'){\n\t    \tentry[name] = {name: value}\n\t    }\n\t    this.setState({entry});\n\t}\n\t\n\trender() {\n\t\tconst {entry} = this.state;\n\t\treturn(\n\t\t\t\t<Container>\n\t\t         <Form onSubmit={this.handleSubmit}>\n\t\t          <FormGroup>\n\t\t            <Label for=\"title\">Title</Label>\n\t\t            <Input type=\"text\"style=\"width: 20px;\" name=\"title\" id=\"title\" value={entry.title || ''}\n\t\t                   onChange={this.handleChange} autoComplete=\"title\"/>\n\t\t          </FormGroup>\n\t\t          <FormGroup>\n\t\t            <Label for=\"category\">Category</Label>\n\t\t            <Input type=\"text\" name=\"category\" id=\"category\" value={entry.category.name || ''}\n\t\t                   onChange={this.handleChange} autoComplete=\"title\"/>\n\t\t          </FormGroup>\n\t\t          <FormGroup>\n\t\t            <Label for=\"content\">Entry</Label>\n\t\t            <Input type=\"textarea\" name=\"content\" id=\"content\" value={entry.content || ''}\n\t\t                   onChange={this.handleChange} autoComplete=\"content\"/>\n\t\t          </FormGroup>\n\t\t          <FormGroup>\n\t\t            <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n\t\t            <Button color=\"secondary\" to=\"/\">Cancel</Button>\n\t\t          </FormGroup>\n\t\t        </Form>\n\t\t      </Container>\n\t\t)\n\t}\n\t\n}\n\nexport default withRouter(NewEntry);"]},"metadata":{},"sourceType":"module"}