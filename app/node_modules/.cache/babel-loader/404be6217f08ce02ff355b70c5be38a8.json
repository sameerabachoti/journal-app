{"ast":null,"code":"var _jsxFileName = \"/Users/sameera/Documents/journalApp/app/src/NewEntry.js\";\nimport React from 'react';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport { withRouter } from 'react-router-dom';\n\nclass NewEntry extends React.Component {\n  constructor(props) {\n    super(props);\n    this.emptyEntry = {\n      id: '',\n      title: '',\n      content: '',\n      dateCreated: '',\n      dateModified: '',\n      category: {\n        name: ''\n      }\n    };\n    this.state = {\n      entry: this.emptyEntry\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      entry\n    } = this.state;\n    entry.id = this.props.match.params.id; //const entry = await (await fetch(`/api/entry/${this.props.match.params.id}`)).json();\n    //console.log(\"entry component did mount\", this.props.match.params.id);\n\n    this.setState({\n      entry\n    });\n  }\n\n  async componentDidMount() {\n    const response = await fetch('/api/user', {\n      credentials: 'include'\n    });\n    const body = await response.text();\n\n    if (body === '') {\n      this.setState({\n        isAuthenticated: false\n      });\n    } else {\n      this.setState({\n        isAuthenticated: true,\n        user: JSON.parse(body)\n      });\n    }\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const {\n      entry\n    } = this.state;\n    entry.user = this.state.user;\n    console.log(\"entry handle submit \", entry);\n\n    if (entry.id) {\n      await fetch('/api/entry/:id', {\n        method: 'PUT',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(entry)\n      });\n    } else {\n      await fetch('/api/entry/', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(entry)\n      });\n    }\n\n    this.props.history.push('/entries');\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    let entry = { ...this.state.entry\n    };\n    entry[name] = value;\n\n    if (name == 'category') {\n      entry[name] = {\n        name: value\n      };\n    }\n\n    this.setState({\n      entry\n    });\n  }\n\n  render() {\n    const {\n      entry\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }\n    }, \"Title\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"title\",\n      id: \"title\",\n      value: entry.title || '',\n      onChange: this.handleChange,\n      autoComplete: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 15\n      }\n    }, \"Category\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"category\",\n      id: \"category\",\n      value: entry.category.name || '',\n      onChange: this.handleChange,\n      autoComplete: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }\n    }, \"Entry\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"textarea\",\n      name: \"content\",\n      id: \"content\",\n      value: entry.content || '',\n      onChange: this.handleChange,\n      autoComplete: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }\n    }, \"Save\"), ' ', /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }\n    }, \"Cancel\"))));\n  }\n\n}\n\nexport default withRouter(NewEntry);","map":{"version":3,"sources":["/Users/sameera/Documents/journalApp/app/src/NewEntry.js"],"names":["React","Button","Container","Form","FormGroup","Input","Label","withRouter","NewEntry","Component","constructor","props","emptyEntry","id","title","content","dateCreated","dateModified","category","name","state","entry","handleChange","bind","handleSubmit","componentDidMount","match","params","setState","response","fetch","credentials","body","text","isAuthenticated","user","JSON","parse","event","preventDefault","console","log","method","headers","stringify","history","push","target","value","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport { withRouter } from 'react-router-dom';\n\nclass NewEntry extends React.Component {\n\t\n\temptyEntry = {\n\t\t    id: '',\n\t\t    title: '',\n\t\t    content: '',\n\t\t    dateCreated: '',\n\t\t    dateModified: '', \n\t\t    category: {name: ''}\n\t};\n\t\n\tconstructor(props) {\n\t    super(props);\n\t    this.state = {\n\t    \tentry: this.emptyEntry,\n\t    };\n\t    this.handleChange = this.handleChange.bind(this);\n\t    this.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\t\n\tcomponentDidMount(){\n\t\tconst {entry} = this.state;\n\t\tentry.id = this.props.match.params.id;\n\t\t//const entry = await (await fetch(`/api/entry/${this.props.match.params.id}`)).json();\n\t\t//console.log(\"entry component did mount\", this.props.match.params.id);\n\t\tthis.setState({entry});\n\t}\n\t\n\tasync componentDidMount() {\n\t    const response = await fetch('/api/user', {credentials: 'include'});\n\t    const body = await response.text();\n\t    if (body === '') {\n\t\t    this.setState(({isAuthenticated: false}))\n\t\t} else {\n\t\t    this.setState({isAuthenticated: true, user: JSON.parse(body)})\n\t\t}\n\t}\n\t\n\tasync handleSubmit(event) {\n\t    event.preventDefault();\n\t    const {entry} = this.state;\n\t    entry.user = this.state.user;\n\t    console.log(\"entry handle submit \", entry);\n\t    if(entry.id){\n\t\t    await fetch('/api/entry/:id', {\n\t\t      method: 'PUT',\n\t\t      headers: {\n\t\t        'Accept': 'application/json',\n\t\t        'Content-Type': 'application/json'\n\t\t      },\n\t\t      body: JSON.stringify(entry)\n\t\t    });\n\t    }\n\t    else{\n\t    \tawait fetch('/api/entry/', {   \t\n\t\t\t    method: 'POST',\n\t\t\t    headers: {\n\t\t\t      'Accept': 'application/json',\n\t\t\t      'Content-Type': 'application/json'\n\t\t\t    },\n\t\t\t    body: JSON.stringify(entry)\n\t\t\t });\n\t    \t\n\t    }\n\t    this.props.history.push('/entries');\n\t }\n\t\n\thandleChange(event) {\n\t\tconst target = event.target;\n\t    const value = target.value;\n\t    const name = target.name;\n\t    let entry = {...this.state.entry};\n\t    entry[name] = value;\n\t    if(name=='category'){\n\t    \tentry[name] = {name: value}\n\t    }\n\t    this.setState({entry});\n\t}\n\t\n\trender() {\n\t\tconst {entry} = this.state;\n\t\treturn(\n\t\t\t\t<Container>\n\t\t        <Form onSubmit={this.handleSubmit}>\n\t\t          <FormGroup>\n\t\t            <Label for=\"title\">Title</Label>\n\t\t            <Input type=\"text\" name=\"title\" id=\"title\" value={entry.title || ''}\n\t\t                   onChange={this.handleChange} autoComplete=\"title\"/>\n\t\t          </FormGroup>\n\t\t          <FormGroup>\n\t\t            <Label for=\"category\">Category</Label>\n\t\t            <Input type=\"text\" name=\"category\" id=\"category\" value={entry.category.name || ''}\n\t\t                   onChange={this.handleChange} autoComplete=\"title\"/>\n\t\t          </FormGroup>\n\t\t          <FormGroup>\n\t\t            <Label for=\"content\">Entry</Label>\n\t\t            <Input type=\"textarea\" name=\"content\" id=\"content\" value={entry.content || ''}\n\t\t                   onChange={this.handleChange} autoComplete=\"content\"/>\n\t\t          </FormGroup>\n\t\t          <FormGroup>\n\t\t            <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n\t\t            <Button color=\"secondary\" to=\"/\">Cancel</Button>\n\t\t          </FormGroup>\n\t\t        </Form>\n\t\t      </Container>\n\t\t)\n\t}\n\t\n}\n\nexport default withRouter(NewEntry);"]},"metadata":{},"sourceType":"module"}